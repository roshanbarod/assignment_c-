Que:12:-Give examples of application domains where OOP is commonly used (e.g., GUI development, game programming, etc.)

several key application domains where Object-Oriented Programming (OOP) in C++ is commonly used, along with concrete C++ examples:

1. Game Development
Why OOP?
Games involve many interacting objects (players, enemies, items) with shared behaviors and unique characteristics.
C++ Example:

cpp
#include <iostream>
#include <string>
using namespace std;

// Base class
class GameObject {
protected:
    string name;
    float x, y;
public:
    GameObject(string n, float xPos, float yPos) : name(n), x(xPos), y(yPos) {}
    virtual void Update() { cout << name << " is updating...\n"; }  // Polymorphism
};

// Derived class
class Player : public GameObject {
private:
    int health;
public:
    Player(string n, float xPos, float yPos, int h) : GameObject(n, xPos, yPos), health(h) {}
    void Update() override { 
        cout << name << " (Health: " << health << ") moves to (" << x << ", " << y << ")\n"; 
    }
};

int main() {
    GameObject* entities[] = { new GameObject("Tree", 10, 20), 
                              new Player("Hero", 5, 5, 100) };
    for (auto entity : entities) {
        entity->Update();  // Dynamic dispatch
        delete entity;
    }
}
Output:

Tree is updating...
Hero (Health: 100) moves to (5, 5)
Key OOP Features:

Inheritance (Player extends GameObject)

Polymorphism (virtual + override)

2. Graphical User Interfaces (GUIs)
Why OOP?
GUI elements (buttons, windows) are naturally modeled as objects with properties and event handlers.
C++ Example (Qt Framework):

cpp
#include <QApplication>
#include <QPushButton>

class MyButton : public QPushButton {  // Inheritance
public:
    MyButton(const QString& text) : QPushButton(text) {
        connect(this, &QPushButton::clicked, this, &MyButton::onClick);
    }
private slots:
    void onClick() { qDebug("Button clicked!"); }  // Encapsulation
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    MyButton button("Click Me");
    button.show();
    return app.exec();
}
Key OOP Features:

Encapsulation (private onClick slot)

Inheritance (MyButton extends QPushButton)

3. Embedded Systems (IoT/ Robotics)
Why OOP?
Hardware components (sensors, motors) map well to objects with state and control methods.
C++ Example (Arduino-style):

cpp
class TemperatureSensor {
private:
    int pin;
    float currentTemp;
public:
    TemperatureSensor(int p) : pin(p) {}
    void read() { 
        currentTemp = analogRead(pin) * 0.1f;  // Simulated reading
    }
    float getTemp() const { return currentTemp; }  // Encapsulation
};

int main() {
    TemperatureSensor sensor(A0);
    sensor.read();
    cout << "Temperature: " << sensor.getTemp() << "Â°C\n";
}
4. Financial Systems (Banking/Trading)
Why OOP?
Real-world entities like accounts and transactions need secure, modular representations.
C++ Example:

cpp
class BankAccount {
private:
    string accountNumber;
    double balance;
public:
    BankAccount(string accNum) : accountNumber(accNum), balance(0) {}
    void deposit(double amount) { 
        if (amount > 0) balance += amount;  // Validation
    }
    string getAccNum() const { return accountNumber; }  // Read-only access
};

int main() {
    BankAccount acc("ACC123");
    acc.deposit(1000);
    cout << "Account " << acc.getAccNum() << " balance updated.\n";
}
5. Simulation & Scientific Computing
Why OOP?
Physical systems (particles, fluids) can be modeled as interacting objects.
C++ Example:

cpp
class Particle {
private:
    double mass, velocity;
public:
    Particle(double m, double v) : mass(m), velocity(v) {}
    double kineticEnergy() const { return 0.5 * mass * velocity * velocity; }
};

int main() {
    Particle electron(9.1e-31, 2.2e6);
    cout << "Electron energy: " << electron.kineticEnergy() << " J\n";
}