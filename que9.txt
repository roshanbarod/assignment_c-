Que-9:-Describe polymorphism. How does it contribute to flexibility and extensibility in software design? Give examples of function/operator overloading and function overriding?

Polymorphism in Object-Oriented Programming (OOP)
Definition:
Polymorphism (Greek for "many forms") allows objects of different classes to be treated as objects of a common superclass, enabling one interface with multiple implementations.

Why Polymorphism Matters
Flexibility:

A single function/method can work with different data types.

Example: A draw() method behaves differently for Circle vs. Square.

Extensibility:

New classes can be added without modifying existing code.

Example: Adding a Triangle class doesnâ€™t require changes to the Shape interface.

Types of Polymorphism
1. Compile-Time Polymorphism (Static)
Resolved during compile time.

Includes:

Function Overloading

Operator Overloading

Example 1: Function Overloading
Same function name, different parameters:

cpp
void print(int x) {  
    cout << "Integer: " << x << endl;  
}  

void print(string s) {  
    cout << "String: " << s << endl;  
}  

int main() {  
    print(10);       // Calls print(int)  
    print("Hello");  // Calls print(string)  
}  
Output:

Integer: 10  
String: Hello  
Example 2: Operator Overloading
Redefine operators (e.g., +) for custom classes:

cpp
class Vector {  
public:  
    int x, y;  
    Vector(int x, int y) : x(x), y(y) {}  

    // Overload the '+' operator  
    Vector operator+(Vector v) {  
        return Vector(x + v.x, y + v.y);  
    }  
};  

int main() {  
    Vector v1(1, 2), v2(3, 4);  
    Vector v3 = v1 + v2;  // Uses overloaded '+'  
    cout << v3.x << ", " << v3.y;  // Output: 4, 6  
}  
2. Runtime Polymorphism (Dynamic)
Resolved during runtime (using virtual functions and pointers).

Achieved via:

Function Overriding

Example: Function Overriding
Child class redefines a parent class method:

cpp
class Shape {  
public:  
    virtual void draw() {  // 'virtual' enables overriding  
        cout << "Drawing a shape." << endl;  
    }  
};  

class Circle : public Shape {  
public:  
    void draw() override {  // Overrides Shape::draw()  
        cout << "Drawing a circle." << endl;  
    }  
};  

int main() {  
    Shape* shape = new Circle();  // Parent pointer, child object  
    shape->draw();  // Calls Circle::draw() (not Shape::draw())  
    delete shape;  
}  
Output:

Drawing a circle.  
How Polymorphism Enhances Software Design
Flexibility:

A Shape pointer can hold Circle, Square, or any future subclass.

Example: A game engine renders all GameObjects uniformly, regardless of their actual type.

Extensibility:

Add new subclasses (e.g., Triangle) without changing existing code that uses the superclass (Shape).

Cleaner Code:

Avoids long if-else chains (e.g., if (shapeType == CIRCLE) ... else if ...).